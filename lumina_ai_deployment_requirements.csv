Category,Item,Description,Recommended Value,Instructions for Obtaining
AWS Credentials,AWS Access Key ID,Access key for AWS API authentication,<Your AWS Access Key ID>,1. Log in to AWS Management Console. 2. Navigate to IAM > Users > Your Username. 3. Select "Security credentials" tab. 4. Click "Create access key". 5. Download or copy the Access Key ID. Note: Create a new IAM user with appropriate permissions if you don't have one.
AWS Credentials,AWS Secret Access Key,Secret key for AWS API authentication,<Your AWS Secret Access Key>,1. This is shown only once when you create an access key in the AWS Console. 2. If you didn't save it, you'll need to create a new access key and delete the old one. 3. Store securely in a password manager.
AWS Credentials,AWS Region,AWS region where resources will be deployed,us-west-2,1. Choose the region closest to your users for lowest latency. 2. Ensure the region supports all required services (EKS, Aurora PostgreSQL, ECR). 3. Common regions: us-east-1, us-west-2, eu-west-1, ap-southeast-1.
AWS Resources,EKS Cluster Name,Name of the EKS cluster for deployment,lumina-ai-cluster,1. If you don't have an EKS cluster: Create one using AWS Console or eksctl. 2. Command: eksctl create cluster --name lumina-ai-cluster --region us-west-2 --nodegroup-name standard-nodes --node-type m5.large --nodes 3 --nodes-min 3 --nodes-max 10 --managed
AWS Resources,Database Connection String,Connection string for Aurora PostgreSQL database,postgresql://lumina-admin:<password>@<your-db-endpoint>:5432/luminadb,1. Create Aurora PostgreSQL cluster in AWS RDS Console. 2. Select PostgreSQL compatibility. 3. Set master username to "lumina-admin". 4. After creation, get the endpoint from the Connectivity section. 5. Format: postgresql://username:password@endpoint:5432/dbname
AWS Resources,ECR Repository URL,URL for container image repository,<your-aws-account-id>.dkr.ecr.<region>.amazonaws.com/lumina-ai,1. Go to Amazon ECR Console. 2. Click "Create repository". 3. Name it "lumina-ai". 4. After creation, copy the repository URI. 5. You'll need to create repositories for each service or use image tags to differentiate.
External APIs,OpenAI API Key,API key for OpenAI services,sk-...,1. Create an account at https://openai.com. 2. Navigate to API section. 3. Generate a new API key. 4. Store securely - never commit to code repositories.
External APIs,Anthropic API Key,API key for Anthropic Claude services,sk-ant-...,1. Sign up for Anthropic API access at https://console.anthropic.com. 2. Once approved, generate an API key from the console. 3. Store securely.
External APIs,Other AI Provider Keys,API keys for additional AI providers,<Provider-specific keys>,1. Sign up for each provider's platform. 2. Navigate to their developer or API section. 3. Generate API keys as needed. 4. Common providers: Cohere, AI21, Hugging Face.
Security,JWT Secret Key,Secret key for JWT token generation,<Generate a secure random string>,1. Generate a secure random string (at least 32 characters). 2. Command: openssl rand -base64 32. 3. Store securely and never commit to code repositories.
Security,TLS Certificate,TLS certificate for secure communication,<Path to certificate files>,1. For development: Generate self-signed certificates using OpenSSL. 2. For production: Use AWS Certificate Manager or Let's Encrypt. 3. For Let's Encrypt: Use certbot with DNS validation.
Security,Database Credentials,Username and password for database access,Username: lumina-admin Password: <Strong password>,1. Generate a strong password (16+ characters with mix of types). 2. Command: openssl rand -base64 16. 3. Store securely in a password manager. 4. Use these credentials when creating your Aurora database.
DNS,Domain Name,Domain name for application access,lumina-ai.yourdomain.com,1. Purchase a domain through a registrar like Route53, GoDaddy, or Namecheap. 2. If using Route53, create a hosted zone. 3. If using another registrar, point nameservers to AWS or set up appropriate records.
DNS,DNS Records,DNS records for routing traffic,Type: A or CNAME Record: * Value: <Load Balancer Address>,1. After deployment, get the Load Balancer address from AWS Console or kubectl. 2. Create DNS records in your domain registrar or Route53. 3. For wildcard subdomains, use *.yourdomain.com pointing to the load balancer.
Monitoring,Grafana Admin Password,Password for Grafana admin user,<Strong password>,1. Generate a strong password. 2. This will be set during Grafana installation. 3. Can be changed later through Grafana UI or Kubernetes secret.
Monitoring,Alert Email Address,Email for receiving monitoring alerts,alerts@yourdomain.com,1. Set up a dedicated email address for alerts. 2. Consider integration with incident management systems like PagerDuty or OpsGenie for better alert handling.
CI/CD,GitHub Personal Access Token,Token for GitHub Actions authentication,<Your GitHub PAT>,1. Go to GitHub > Settings > Developer settings > Personal access tokens. 2. Generate new token with repo and workflow permissions. 3. Store securely.
CI/CD,Docker Hub Credentials,Credentials for Docker Hub access,Username: <Your Docker Hub username> Password: <Your Docker Hub password>,1. Create Docker Hub account if you don't have one. 2. These will be used if pulling base images from Docker Hub. 3. Consider using AWS ECR for all images to avoid Docker Hub rate limits.
Storage,S3 Bucket Name,S3 bucket for backups and storage,lumina-ai-backups,1. Go to S3 Console. 2. Click "Create bucket". 3. Name it "lumina-ai-backups". 4. Configure appropriate permissions and lifecycle policies.
Environment Variables,NODE_ENV,Node.js environment setting,production,Set this to "development" for dev environment, "staging" for staging, and "production" for production.
Environment Variables,LOG_LEVEL,Logging verbosity level,INFO,Set to "DEBUG" for development, "INFO" for staging and production. Change to "DEBUG" temporarily when troubleshooting issues.
Feature Flags,ENABLE_MEMORY_TRACKING,Toggle for memory tracking feature,true,Set to "true" to enable the memory tracking feature for long-term projects.
Feature Flags,CHAT_LENGTH_MONITOR_THRESHOLD,Percentage threshold for chat length warnings,80,Set to a value between 70-90. Lower values give earlier warnings but may be too frequent.
Feature Flags,ENABLE_VISUAL_THINKING,Toggle for visual thinking display feature,true,Set to "true" to enable the visual thinking display feature.
Resource Limits,CPU Request (EndUser Service),CPU resources requested for EndUser service,1000m,Adjust based on expected load. Start with 1000m (1 CPU core) and monitor usage.
Resource Limits,Memory Request (EndUser Service),Memory resources requested for EndUser service,2Gi,Adjust based on expected load. Start with 2Gi and monitor usage.
Resource Limits,CPU Limit (EndUser Service),CPU resource limit for EndUser service,2000m,Set to 2-3x the request value to allow for traffic spikes.
Resource Limits,Memory Limit (EndUser Service),Memory resource limit for EndUser service,4Gi,Set to 2x the request value to allow for traffic spikes.
Scaling Parameters,Min Replicas (EndUser Service),Minimum number of EndUser service replicas,3,Set to at least 2 for high availability in production, 1 for dev/staging.
Scaling Parameters,Max Replicas (EndUser Service),Maximum number of EndUser service replicas,10,Set based on expected peak load and budget constraints.
Scaling Parameters,CPU Target Utilization,CPU threshold for autoscaling,70,Set between 50-80%. Lower values scale up earlier but cost more.
